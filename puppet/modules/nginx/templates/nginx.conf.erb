# This server block is an example of how to redirect from non-HTTPS traffic to a
# HTTPS enabled server block, or how to redirect eg. from example.com to
# www.example.com. This is optional, so remove it if it doesn't apply to your
# use case.
# server {
#     listen 80 default_server;
#     server_name <%= @web_hostname %> www.<%= @web_hostname %>;
#
#     # This location block enables support for Let's Encrypt on the non-HTTPS
#     # domain
#     location /.well-known {
#         root <%= @web_root %>;
#     }
#
#     location / {
#         return 301 https://www.<%= @web_hostname %>$request_uri;
#     }
# }

server {
    # listen 443 ssl http2;
    <%- if @is_default_host -%>
    listen 80 default_server;
    <%- else -%>
    listen 80;
    <%- end -%>
    server_name <%= @web_hostname %> www.<%= @web_hostname %>;

    # Block all IP's except LL IP
    # allow 80.252.215.138;
    # deny all;

    root <%= @web_root %>;
    index index.php index.html;
    client_max_body_size 200m;
    charset utf-8;
    proxy_read_timeout 120;

    access_log <%= @log_dir %>/access.log;
    error_log <%= @log_dir %>/error.log;

    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css text/xml application/json application/javascript application/xml;

    http2_push_preload on;

    <%- if @is_vagrant_env -%>
    # This fixes a bug in VirtualBox related to sendfile that can corrupt files.
    # See http://stackoverflow.com/a/29588517/618739 for more details
    sendfile off;
    <%- else -%>
    sendfile on;
    <%- end -%>

    # Uncomment and update paths to SSL certificate and SSL certificate key to
    # enable HTTPS. Please remember that you also have to change this server
    # block to listen on port 443

    # ssl on;
    # ssl_certificate /etc/letsencrypt/live/<%= @web_hostname %>/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/<%= @web_hostname %>/privkey.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # This is a "modern" configuration of SSL ciphers based on Mozilla's SSL
    # configuration generator (https://mozilla.github.io/server-side-tls/ssl-config-generator/)
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    # OCSP Stapling ---
    # Fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    location / {
        try_files $uri $uri/ /wordpress$uri /index.php?$args;
    }

    location = /wp-login.php {
        return 302 https://$host/wordpress/wp-admin;
    }

    # Add trailing slash to */wp-admin requests
    rewrite /wp-admin$ $scheme://$host$uri/ permanent;

    # Block xmlrpc DDoS
    location /xmlrpc.php {
        deny all;
        access_log off;
    }

    <%- if @wp_upload_proxy_url -%>
    # If you want to deploy a local development environment for an existing live
    # site, this is a handy trick for looking up files in WordPress's uploads
    # directory from the actual live site. That means you don't have to sync the
    # uploads directory, but can make do with a copy of the database
    location ~ ^/wordpress/wp-content/uploads/.*$ {
        try_files $uri $uri/ @production;
    }

    location @production {
        # If the remove site isn't hosting WordPress in the /wordpress
        # subcatalog, then uncomment the following line
        # rewrite ^/wordpress(.*$) $1 break;
        proxy_pass <%= @wp_upload_proxy_url %>;
    }
    <%- end -%>

    location ~ \.php$ {
        fastcgi_pass <%= @php_socket %>;

        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_read_timeout 300;
    }

    # Protect WooCommerce upload folder from being accessed directly. See:
    # https://docs.woocommerce.com/document/digital-downloadable-product-handling/
    location ~* /wordpress/wp-content/uploads/woocommerce_uploads/ {
        if ($upstream_http_x_accel_redirect = "") {
            return 403;
        }
        internal;
    }

    <%- if @phpmyadmin_allow_ip -%>
    location /phpmyadmin {
        # Block all IP's except LL IP
        allow <%= @phpmyadmin_allow_ip %>;
        deny all;
    }
    <%- end -%>

    # Send Cache-Control headers for assets and turn off 404 error logging
    location ~* ^.+\.(css|js|ogg|ogv|svg|mp4|jpg|jpeg|gif|png|ico)$ {
        access_log off;
        log_not_found off;
        expires max;
    }

    # Only allow fonts to be downloaded if Referer header matches server_name
    # directive
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
        try_files $uri $uri/ /wordpress$uri /index.php?$args;
        access_log off;
        log_not_found off;
        expires max;
        valid_referers server_names;

        if ($invalid_referer) {
            return 403;
        }
    }

    # Prevent clients from accessing hidden files (starting with a dot) This is
    # particularly important if you store .htpasswd files in the site hierarchy.
    # Access to `/.well-known/` is allowed however.
    # https://www.mnot.net/blog/2010/04/07/well-known
    location ~* /\.(?!well-known\/) {
        deny all;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }
}
